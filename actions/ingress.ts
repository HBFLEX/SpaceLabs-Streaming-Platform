'use server'

import {
    IngressAudioEncodingPreset,
    IngressInput,
    IngressClient,
    IngressVideoEncodingPreset,
    RoomServiceClient,
    type CreateIngressOptions
} from 'livekit-server-sdk'

import { TrackSource } from 'livekit-server-sdk/dist/proto/livekit_models'

import { db } from '@/lib/db'
import { getSelf } from '@/lib/auth-service'
import { revalidatePath } from 'next/cache'


const roomService = new RoomServiceClient(
    process.env.LIVEKIT_API_URL!,
    process.env.LIVEKIT_API_KEY!,
    process.env.LIVEKIT_API_SECRET_KEY!
)

// initialize a new ingress
const ingressClient = new IngressClient(process.env.LIVEKIT_API_URL!)

export const resetIngresses = async (hostIdentity: string) => {
    // get all ingresses generated by host
    const ingresses = await ingressClient.listIngress({
        roomName: hostIdentity,
    })

    // get all the rooms created by host
    const rooms = await roomService.listRooms([hostIdentity])

    // delete all rooms
    for(const room of rooms){
        await roomService.deleteRoom(room.name)
    }

    // delete all ingresses if present
    for(const ingress of ingresses){
        if(ingress.ingressId) await ingressClient.deleteIngress(ingress.ingressId)
    }
}

export const createIngress = async (ingressType: IngressInput) => {
    const self = await getSelf()
    if(!self) throw new Error('No user data found')

    // reset previous ingress
    await resetIngresses(self.id)

    const options: CreateIngressOptions = {
        name: self.username,
        roomName: self.id,
        participantName: self.username,
        participantIdentity: self.id
    }

    // if ingress = WHIP protocol then allow transcode bypassing
    // if ingress = RTMP protocol allow video & audio tracksource
    if(ingressType === IngressInput.WHIP_INPUT){
        options.bypassTranscoding = true
    }else{
        options.video = {
            source: TrackSource.CAMERA,
            preset: IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS,
        }
        options.audio = {
            source: TrackSource.MICROPHONE,
            preset: IngressAudioEncodingPreset.OPUS_STEREO_96KBPS
        }
    }

    // create a new ingress
    const ingress = await ingressClient.createIngress(
        ingressType,
        options
    )

    if(!ingress || !ingress.url || !ingress.streamKey){
        throw new Error('Failed to create ingress')
    }

    await db.stream.update({
        where: { userId: self.id },
        data: {
            ingressId: ingress.ingressId,
            serverUrl: ingress.url,
            streamKey: ingress.streamKey,
        }
    })

    revalidatePath(`/dashboard/${self.username}/keys`)
    return ingress
}

